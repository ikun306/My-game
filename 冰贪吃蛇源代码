#include <SFML/Graphics.hpp>
#include <SFML/Audio.hpp>
#include <iostream>
#include <deque>
#include <vector>
#include <ctime>
#include <sstream>

const int WIDTH = 1200;
const int HEIGHT = 700;
const int CELL_SIZE = 20;
const int MAX_FOOD = 15;

class Snake {
public:
    Snake() {
        snakeBody.push_front(sf::Vector2i(10, 10));
    }

    void move(sf::Vector2i dir) {
        sf::Vector2i newHead = snakeBody.front() + dir;
        snakeBody.push_front(newHead);
        snakeBody.pop_back();
    }

    void grow(sf::Vector2i dir) {
        sf::Vector2i newHead = snakeBody.front() + dir;
        snakeBody.push_front(newHead);
    }

    bool checkCollision() {
        sf::Vector2i head = snakeBody.front();
        for (auto it = snakeBody.begin() + 1; it != snakeBody.end(); ++it) {
            if (*it == head) {
                return true;
            }
        }
        return false;
    }

    std::deque<sf::Vector2i> snakeBody;
};

int main() {
    sf::RenderWindow window(sf::VideoMode(WIDTH, HEIGHT), "SFML Snake Game");
    window.setFramerateLimit(10);

    // 背景
    sf::Texture backgroundTexture;
    if (!backgroundTexture.loadFromFile("Image/bj.jpg")) {
        std::cerr << "Failed to load background image" << std::endl;
        return 1;
    }
    sf::Sprite background(backgroundTexture);
    background.setScale(float(WIDTH) / backgroundTexture.getSize().x, float(HEIGHT) / backgroundTexture.getSize().y);

    // 背景音乐
    sf::Music backgroundMusic;
    if (!backgroundMusic.openFromFile("Music/bjy.mp3")) {
        std::cerr << "Failed to load background music" << std::endl;
        return 1;
    }
    backgroundMusic.setLoop(true);
    backgroundMusic.play();

    // 食物音效
    sf::SoundBuffer foodBuffer;
    if (!foodBuffer.loadFromFile("Music/cd1.mp3")) {
        std::cerr << "Failed to load food sound effect" << std::endl;
        return 1;
    }
    sf::Sound foodSound(foodBuffer);

    // 游戏结束图片
    sf::Texture gameOverTexture;
    if (!gameOverTexture.loadFromFile("Image/gg.jpg")) {
        std::cerr << "Failed to load game over image" << std::endl;
        return 1;
    }
    sf::Sprite gameOverSprite(gameOverTexture);
    gameOverSprite.setPosition((WIDTH - gameOverTexture.getSize().x) / 2, (HEIGHT - gameOverTexture.getSize().y) / 2);

    // 游戏结束音效
    sf::SoundBuffer gameOverBuffer;
    if (!gameOverBuffer.loadFromFile("Music/gg.mp3")) {
        std::cerr << "Failed to load game over sound effect" << std::endl;
        return 1;
    }
    sf::Sound gameOverSound(gameOverBuffer);

    // 食物
    sf::Texture foodTexture;
    if (!foodTexture.loadFromFile("Image/food.png")) {
        std::cerr << "Failed to load food image" << std::endl;
        return 1;
    }
    sf::Sprite foodSprite(foodTexture);
    foodSprite.setScale(float(CELL_SIZE) / foodTexture.getSize().x, float(CELL_SIZE) / foodTexture.getSize().y);

    // 分数文本
    sf::Font font;
    if (!font.loadFromFile("zt/arial.ttf")) {
        std::cerr << "Failed to load font" << std::endl;
        return 1;
    }
    sf::Text scoreText;
    scoreText.setFont(font);
    scoreText.setCharacterSize(24);
    scoreText.setFillColor(sf::Color::White);
    scoreText.setPosition(10, 10);

    Snake snake;
    sf::Vector2i direction(1, 0);
    std::vector<sf::Vector2i> foodPositions;
    srand(time(NULL));
    int score = 0;
    bool gameIsOver = false;

    // 初始化食物
    for (int i = 0; i < MAX_FOOD; ++i) {
        foodPositions.push_back(sf::Vector2i(rand() % (WIDTH / CELL_SIZE), rand() % (HEIGHT / CELL_SIZE)));
    }

    while (window.isOpen()) {
        sf::Event event;
        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed) {
                window.close();
            }
            if (gameIsOver && event.type == sf::Event::KeyReleased) {
                window.close();
            }
            if (!gameIsOver && event.type == sf::Event::KeyPressed) {
                if (event.key.code == sf::Keyboard::Up && direction.y != 1) {
                    direction = sf::Vector2i(0, -1);
                }
                else if (event.key.code == sf::Keyboard::Down && direction.y != -1) {
                    direction = sf::Vector2i(0, 1);
                }
                else if (event.key.code == sf::Keyboard::Left && direction.x != 1) {
                    direction = sf::Vector2i(-1, 0);
                }
                else if (event.key.code == sf::Keyboard::Right && direction.x != -1) {
                    direction = sf::Vector2i(1, 0);
                }
            }
        }

        if (!gameIsOver) {
            // 移动蛇
            snake.move(direction);

            // 检查碰撞
            if (snake.checkCollision() ||
                snake.snakeBody.front().x < 0 || snake.snakeBody.front().x >= WIDTH / CELL_SIZE ||
                snake.snakeBody.front().y < 0 || snake.snakeBody.front().y >= HEIGHT / CELL_SIZE) {
                std::cout << "Game Over!" << std::endl;
                std::cout << "Final Score: " << score << std::endl;
                backgroundMusic.stop();
                gameOverSound.play();
                gameIsOver = true;
            }

            // 检查是否吃到食物
            for (auto it = foodPositions.begin(); it != foodPositions.end();) {
                if (snake.snakeBody.front() == *it) {
                    snake.grow(direction);
                    it = foodPositions.erase(it);
                    ++score;
                    foodSound.play(); // 播放食物音效
                }
                else {
                    ++it;
                }
            }

            // 如果食物被吃光，则补充食物
            if (foodPositions.size() < MAX_FOOD) {
                foodPositions.push_back(sf::Vector2i(rand() % (WIDTH / CELL_SIZE), rand() % (HEIGHT / CELL_SIZE)));
            }
        }

        // 更新分数文本
        std::stringstream ss;
        ss << "score: " << score;
        scoreText.setString(ss.str());

        // 渲染游戏界面
        window.clear();
        window.draw(background); // 绘制背景
        for (auto& pos : foodPositions) {
            foodSprite.setPosition(pos.x * CELL_SIZE, pos.y * CELL_SIZE);
            window.draw(foodSprite);
        }
        for (auto& cell : snake.snakeBody) {
            sf::RectangleShape rectangle(sf::Vector2f(CELL_SIZE, CELL_SIZE));
            rectangle.setPosition(cell.x * CELL_SIZE, cell.y * CELL_SIZE);
            rectangle.setFillColor(sf::Color::Green);
            window.draw(rectangle);
        }

        if (gameIsOver) {
            window.draw(gameOverSprite); // 绘制游戏结束画面
        }

        window.draw(scoreText); // 绘制分数文本

        window.display();
    }

    return 0;
}
